// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRestaurant = `-- name: DeleteRestaurant :one
DELETE FROM restaurant 
WHERE id = $1
RETURNING id, name, address, created_at
`

func (q *Queries) DeleteRestaurant(ctx context.Context, id pgtype.UUID) (Restaurant, error) {
	row := q.db.QueryRow(ctx, deleteRestaurant, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getAllRestaurant = `-- name: GetAllRestaurant :many
SELECT id, name, address, created_at FROM restaurant ORDER BY created_at DESC
`

func (q *Queries) GetAllRestaurant(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, getAllRestaurant)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurant = `-- name: GetRestaurant :one
SELECT id, name, address, created_at FROM restaurant WHERE id = $1
`

func (q *Queries) GetRestaurant(ctx context.Context, id pgtype.UUID) (Restaurant, error) {
	row := q.db.QueryRow(ctx, getRestaurant, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const insertNewRestaurant = `-- name: InsertNewRestaurant :one
INSERT INTO restaurant (name, address) 
VALUES ($1,$2)
RETURNING id, name, address, created_at
`

type InsertNewRestaurantParams struct {
	Name    string
	Address string
}

func (q *Queries) InsertNewRestaurant(ctx context.Context, arg InsertNewRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, insertNewRestaurant, arg.Name, arg.Address)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const updateExistingRestaurant = `-- name: UpdateExistingRestaurant :one
UPDATE restaurant 
SET name = $1, address = $2
WHERE id = $3
RETURNING id, name, address, created_at
`

type UpdateExistingRestaurantParams struct {
	Name    string
	Address string
	ID      pgtype.UUID
}

func (q *Queries) UpdateExistingRestaurant(ctx context.Context, arg UpdateExistingRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, updateExistingRestaurant, arg.Name, arg.Address, arg.ID)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
