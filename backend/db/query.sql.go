// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEmployee = `-- name: AddEmployee :one
INSERT INTO employee (restaurant_id, role_id, name, email, password_hash) 
VALUES (
  (SELECT id FROM restaurant WHERE restaurant.name = $1),
  (SELECT id FROM role WHERE role.name = $2), 
  $3,
  $4,
  crypt($5, gen_salt('bf'))
)
RETURNING id, restaurant_id, role_id, name, email, password_hash, clock_in_time, clock_out_time, created_at, updated_at
`

type AddEmployeeParams struct {
	Name   string
	Name_2 string
	Name_3 string
	Email  string
	Crypt  string
}

func (q *Queries) AddEmployee(ctx context.Context, arg AddEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, addEmployee,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Email,
		arg.Crypt,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.ClockInTime,
		&i.ClockOutTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delegateRoles = `-- name: DelegateRoles :one
UPDATE employee
SET role_id = (SELECT id FROM role WHERE role.name = 'cashier')
WHERE email = $2
AND restaurant_id = (SELECT id FROM restaurant WHERE restaurant.name = $1)
RETURNING id, restaurant_id, role_id, name, email, password_hash, clock_in_time, clock_out_time, created_at, updated_at
`

type DelegateRolesParams struct {
	Name  string
	Email string
}

func (q *Queries) DelegateRoles(ctx context.Context, arg DelegateRolesParams) (Employee, error) {
	row := q.db.QueryRow(ctx, delegateRoles, arg.Name, arg.Email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.ClockInTime,
		&i.ClockOutTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRestaurant = `-- name: DeleteRestaurant :one
DELETE FROM restaurant 
WHERE id = $1
RETURNING id, name, address, created_at
`

func (q *Queries) DeleteRestaurant(ctx context.Context, id pgtype.UUID) (Restaurant, error) {
	row := q.db.QueryRow(ctx, deleteRestaurant, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getAllEmployee = `-- name: GetAllEmployee :many
SELECT e.id, e.name, e.email, r.name AS role
FROM employee e
JOIN role r ON e.role_id = r.id
WHERE e.restaurant_id = (SELECT id FROM restaurant WHERE restaurant.name = $1)
`

type GetAllEmployeeRow struct {
	ID    pgtype.UUID
	Name  string
	Email string
	Role  string
}

func (q *Queries) GetAllEmployee(ctx context.Context, name string) ([]GetAllEmployeeRow, error) {
	rows, err := q.db.Query(ctx, getAllEmployee, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEmployeeRow
	for rows.Next() {
		var i GetAllEmployeeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRestaurant = `-- name: GetAllRestaurant :many
SELECT id, name, address, created_at FROM restaurant ORDER BY created_at DESC
`

func (q *Queries) GetAllRestaurant(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, getAllRestaurant)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurant = `-- name: GetRestaurant :one
SELECT id, name, address, created_at FROM restaurant WHERE id = $1
`

func (q *Queries) GetRestaurant(ctx context.Context, id pgtype.UUID) (Restaurant, error) {
	row := q.db.QueryRow(ctx, getRestaurant, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const insertNewRestaurant = `-- name: InsertNewRestaurant :one
INSERT INTO restaurant (name, address) 
VALUES ($1,$2)
RETURNING id, name, address, created_at
`

type InsertNewRestaurantParams struct {
	Name    string
	Address string
}

func (q *Queries) InsertNewRestaurant(ctx context.Context, arg InsertNewRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, insertNewRestaurant, arg.Name, arg.Address)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const registerRestaurantOwner = `-- name: RegisterRestaurantOwner :one
INSERT INTO employee (restaurant_id, role_id, name, email, password_hash) 
VALUES (
  NULL,
  (SELECT id FROM role WHERE role.name = 'admin'), 
  $1::TEXT,
  $2::TEXT,
  crypt($3, gen_salt('bf'))
)
RETURNING id, restaurant_id, role_id, name, email, password_hash, clock_in_time, clock_out_time, created_at, updated_at
`

type RegisterRestaurantOwnerParams struct {
	Column1 string
	Column2 string
	Crypt   string
}

func (q *Queries) RegisterRestaurantOwner(ctx context.Context, arg RegisterRestaurantOwnerParams) (Employee, error) {
	row := q.db.QueryRow(ctx, registerRestaurantOwner, arg.Column1, arg.Column2, arg.Crypt)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.ClockInTime,
		&i.ClockOutTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeEmployee = `-- name: RemoveEmployee :one
DELETE FROM employee 
WHERE email = $2
AND restaurant_id = (SELECT id FROM restaurant WHERE restaurant.name = $1)
RETURNING id, restaurant_id, role_id, name, email, password_hash, clock_in_time, clock_out_time, created_at, updated_at
`

type RemoveEmployeeParams struct {
	Name  string
	Email string
}

func (q *Queries) RemoveEmployee(ctx context.Context, arg RemoveEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, removeEmployee, arg.Name, arg.Email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.ClockInTime,
		&i.ClockOutTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const transferOwnership = `-- name: TransferOwnership :one
UPDATE employee 
SET role_id = (SELECT id FROM role WHERE role.name = 'admin')
WHERE email = $2
AND restaurant_id = (SELECT id FROM restaurant WHERE restaurant.name = $1)
RETURNING id, restaurant_id, role_id, name, email, password_hash, clock_in_time, clock_out_time, created_at, updated_at
`

type TransferOwnershipParams struct {
	Name  string
	Email string
}

func (q *Queries) TransferOwnership(ctx context.Context, arg TransferOwnershipParams) (Employee, error) {
	row := q.db.QueryRow(ctx, transferOwnership, arg.Name, arg.Email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.ClockInTime,
		&i.ClockOutTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExistingRestaurant = `-- name: UpdateExistingRestaurant :one
UPDATE restaurant 
SET name = $1, address = $2
WHERE id = $3
RETURNING id, name, address, created_at
`

type UpdateExistingRestaurantParams struct {
	Name    string
	Address string
	ID      pgtype.UUID
}

func (q *Queries) UpdateExistingRestaurant(ctx context.Context, arg UpdateExistingRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, updateExistingRestaurant, arg.Name, arg.Address, arg.ID)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
